# -*- coding: utf-8 -*-
"""ML_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AtWEznRJtJ3z5tJf0ZiZRNjKdVe3HYDd
"""

# Description - Using Neural Network LSTM we are predicting the closing stock price of a corporation using the last 60 days stock price.

#Import the libraries
import math
import numpy as np
import pandas as pd
import pandas_datareader as web
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense,LSTM
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import yfinance as yf



symbol = ''
    start_date = '2012-01-01'
    end_date = '2021-12-17'

    # Get the stock quote
    df = yf.download(symbol, start=start_date, end=end_date)
    df

plt.figure(figsize=(26,20))
plt.title('Closing Price')
plt.plot(df.index, df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price', fontsize=18)

# Format the date labels on the x-axis
date_format = mdates.DateFormatter('%Y')
plt.gca().xaxis.set_major_formatter(date_format)

plt.show()

#Create a new Dataframe with only 'Close' column
data = df.filter(['Close'])
#Convert the dataframe to a numpy array
dataset = data.values
#Get the number of rows to train the model on
training_data_len = math.ceil(len(dataset) *0.80)
training_data_len

#Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data

#Create the training data set
#Create the scaled training dataset
train_data = scaled_data[0:training_data_len, :]
#Split the data into x_train and y_train datasets
x_train = []
y_train = []

for i in range(60,len(train_data)):
  x_train.append(train_data[i-60:i, 0])
  y_train.append(train_data[i,0])
  if i<=60:
    print(x_train)
    print(y_train)
    print()

#Convert the x_train and y_train to numpy arrrays
x_train,y_train = np.array(x_train), np.array(y_train)

#Reshape the data
x_train = np.reshape(x_train,(x_train.shape[0],x_train.shape[1],1))
x_train.shape

#Build the LSTM Model
model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(x_train.shape[1],1)))
model.add(LSTM(50,return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss ='mean_squared_error')

#Train the model
model.fit(x_train,y_train, batch_size =1, epochs =1)

#Create testing data set
#Create a new array containing scaled values from index 1543-2003
test_data = scaled_data[training_data_len -60: , : ]
#Create the dataset x_test and y_test
x_test = []
y_test = dataset[training_data_len:, : ]
for i in range(60,len(test_data)):
  x_test.append(test_data[i-60:i,0])

#Convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0],x_test.shape[1],1))

#Get the models predicted proce values
predictions = model.predict(x_test)

predictions = scaler.inverse_transform(predictions) #Unscaling the value
predictions.shape

#Get the root mean Squared error (RMSE)
rmse = np.sqrt(np.mean(predictions - y_test)**2)
from sklearn.metrics import mean_absolute_error, mean_squared_error
import math
from sklearn.metrics import r2_score
rmse = np.sqrt(np.mean(predictions - y_test)**2)
mae = mean_absolute_error(y_test, predictions)
mse = mean_squared_error(y_test, predictions)

mae_rounded = round(mae, 2)
mse_rounded = round(mse, 2)
rmse_rounded = round(rmse, 2)

print('Mean Absolute Error:', mae_rounded)
print('Mean Squared Error:', mse_rounded)
print('Root Mean Squared Error:', rmse_rounded)
r2 = r2_score(y_test, predictions)
accuracy = round(r2 * 100, 2)
print('Accuracy:', accuracy, '%')

#Plot the data
train =data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
#Visualize the data
plt.figure(figsize=(15,6))
plt.title('Model')
plt.xlabel('Date', fontsize = 18)
plt.ylabel('Close Price USD $')
plt.plot(train['Close'])
plt.plot(valid[['Close','Predictions']])
plt.legend(['Train','Val','Predictions'], loc ='upper right')
plt.show()

close = valid['Close']

predict = valid['Predictions']
predict

#Get the quote
apple = yf.download('AAPL', start ='2012-01-01', end ='2022-12-17')
#create new dataframe
new_df = apple.filter(['Close'])
#Get the last 60 days closing price and convert the dataframe to an array
last_60_days = new_df[-60:].values
# Scale the data to be values between 0 and 1
last_60_days_scaled = scaler.transform(last_60_days)
#Create an empty list
X_test = []
#Append the last 60 days
X_test.append(last_60_days_scaled)
#Conver the X_test dataset to a numpy array
X_test = np.array(X_test)
# Reshape the data
X_test = np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
# Get the predicted scale price
pred_price = model.predict(X_test)
#undo the scaling
pred_price = scaler.inverse_transform(pred_price)
print(pred_price)

apple = yf.download('AAPL', start ='2012-01-01', end ='2022-12-29')
#create new dataframe
new_df = apple.filter(['Close'])
new_df

valid